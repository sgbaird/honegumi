# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from ax.modelbridge.factory import Models
from ax.modelbridge.generation_strategy import GenerationStep, GenerationStrategy
from ax.service.ax_client import AxClient, ObjectiveProperties
from botorch.acquisition import UpperConfidenceBound

obj1_name = "branin"
obj2_name = "branin_swapped"

# --- Hardcoded synthetic training data: metals + electrolytes + other params,
# all sum to 1 for composition ---

# Metals: Ni, Fe, Co, Mn, Cr, Zn, Cu (7 metals)
# Electrolytes: e1, e2, e3 (e.g., KOH, NaOH, H2SO4)

# Other params: temperature, pH, current_density, sonication (on/off as 0/1)
total = 1.0


# Hardcoded synthetic function for OER (update to use all params)
def synthetic_oer_objective_full(
    Ni, Fe, Co, Mn, Cr, Zn, Cu, e1, e2, e3, temperature, pH, current_density, sonication
):
    # Nonlinear, interactive synthetic function
    synergy = (
        2 * Ni * Fe + 1.5 * Fe * Co + 1.2 * Ni * Co + 1.1 * Mn * Cr + 0.8 * Zn * Cu
    )
    electrolyte_synergy = 1.8 * e1 * e2 + 1.1 * e2 * e3 + 1.3 * e1 * e3
    # Efficiency
    efficiency = (
        1.0 + 2.5 * Ni + 2.0 * Fe + 1.5 * Co + 1.2 * Mn + 1.0 * Cr + 0.8 * Zn + 0.5 * Cu
    )
    efficiency += synergy + 0.5 * (e1 + e2 + e3) + electrolyte_synergy
    efficiency += 0.5 * np.sin(3 * Ni + 2 * Fe + Co + 2 * e1 + e2)
    efficiency += (
        0.01 * (80 - temperature)
        + 0.02 * pH
        + 0.001 * current_density
        + 0.1 * sonication
    )
    # Durability
    durability = (
        1.0
        + 2.0 * Ni
        + 1.0 * Fe
        + 0.5 * Co
        + 0.5 * synergy
        + 0.2 * (e1 + e2 + e3)
        + 0.5 * electrolyte_synergy
    )
    durability -= 1.5 * Co**2 + 1.0 * e3**2
    durability += (
        0.01 * temperature
        - 0.02 * pH
        - 0.001 * current_density
        + 0.2 * (1 - sonication)
    )
    # Cost
    metal_costs = [10, 5, 30, 8, 15, 7, 12]
    electrolyte_costs = [1, 2, 3]
    cost = sum(
        [c * f for c, f in zip(metal_costs, [Ni, Fe, Co, Mn, Cr, Zn, Cu])]
    ) + sum([c * f for c, f in zip(electrolyte_costs, [e1, e2, e3])])
    cost += 10 * (Co > 0.7) + 2 * (e3 > 0.7)
    cost += 0.01 * temperature + 0.05 * pH + 0.001 * current_density + 0.5 * sonication
    return {"oer_efficiency": efficiency, "durability": durability, "cost": cost}


X_train = pd.DataFrame(
    [
        #           Ni   Fe   Co   Mn   Cr   Zn   Cu   e1   e2   e3   temp   pH   curr  sono # noqa: E501
        {
            "Ni": 0.3,
            "Fe": 0.2,
            "Co": 0.1,
            "Mn": 0.1,
            "Cr": 0.1,
            "Zn": 0.1,
            "Cu": 0.1,
            "e1": 0.0,
            "e2": 0.0,
            "e3": 0.0,
            "temperature": 25,
            "pH": 13,
            "current_density": 100,
            "sonication": 1,
        },
        {
            "Ni": 0.0,
            "Fe": 0.3,
            "Co": 0.2,
            "Mn": 0.2,
            "Cr": 0.1,
            "Zn": 0.1,
            "Cu": 0.1,
            "e1": 0.0,
            "e2": 0.0,
            "e3": 0.2,
            "temperature": 60,
            "pH": 10,
            "current_density": 500,
            "sonication": 0,
        },
        {
            "Ni": 0.2,
            "Fe": 0.2,
            "Co": 0.2,
            "Mn": 0.1,
            "Cr": 0.1,
            "Zn": 0.1,
            "Cu": 0.1,
            "e1": 0.0,
            "e2": 0.1,
            "e3": 0.0,
            "temperature": 40,
            "pH": 7,
            "current_density": 200,
            "sonication": 1,
        },
        {
            "Ni": 0.1,
            "Fe": 0.1,
            "Co": 0.1,
            "Mn": 0.2,
            "Cr": 0.2,
            "Zn": 0.2,
            "Cu": 0.1,
            "e1": 0.0,
            "e2": 0.0,
            "e3": 0.1,
            "temperature": 80,
            "pH": 1,
            "current_density": 1000,
            "sonication": 0,
        },
        {
            "Ni": 0.0,
            "Fe": 0.0,
            "Co": 0.2,
            "Mn": 0.2,
            "Cr": 0.2,
            "Zn": 0.2,
            "Cu": 0.2,
            "e1": 0.0,
            "e2": 0.0,
            "e3": 0.2,
            "temperature": 20,
            "pH": 14,
            "current_density": 10,
            "sonication": 1,
        },
    ]
)

# Hardcode y_train by evaluating X_train on the synthetic function
y_train = [synthetic_oer_objective_full(row) for _, row in X_train.iterrows()]

# See https://youtu.be/4tnaL9ts6CQ for simple human-in-the-loop BO instructions

# Define the number of training examples
n_train = len(X_train)


gs = GenerationStrategy(
    steps=[
        GenerationStep(
            model=Models.SOBOL,
            num_trials=8,  # how many sobol trials to perform (rule of thumb: 2 * number of params) # noqa: E501
            min_trials_observed=3,
            max_parallelism=5,
            model_kwargs={"seed": 999},
        ),
        GenerationStep(
            model=Models.BOTORCH_MODULAR,
            num_trials=-1,
            max_parallelism=3,
            model_kwargs={"botorch_acqf_class": UpperConfidenceBound},
        ),
    ]
)

ax_client = AxClient(generation_strategy=gs)

ax_client.create_experiment(
    parameters=[
        {"name": "Ni", "type": "range", "bounds": [0.0, total]},
        {"name": "Fe", "type": "range", "bounds": [0.0, total]},
        {"name": "Co", "type": "range", "bounds": [0.0, total]},
        {"name": "Mn", "type": "range", "bounds": [0.0, total]},
        {"name": "Cr", "type": "range", "bounds": [0.0, total]},
        {"name": "Zn", "type": "range", "bounds": [0.0, total]},
        {"name": "Cu", "type": "range", "bounds": [0.0, total]},
        {"name": "e1", "type": "range", "bounds": [0.0, total]},
        {"name": "e2", "type": "range", "bounds": [0.0, total]},
        {"name": "e3", "type": "range", "bounds": [0.0, total]},
        {"name": "temperature", "type": "range", "bounds": [20, 80]},
        {"name": "pH", "type": "range", "bounds": [1, 14]},
        {
            "name": "current_density",
            "type": "choice",
            "values": [10, 50, 100, 200, 500, 1000],
        },
        {"name": "sonication", "type": "choice", "values": [0, 1]},
    ],
    objectives={
        "oer_efficiency": ObjectiveProperties(minimize=False),
        "durability": ObjectiveProperties(minimize=False),
        "cost": ObjectiveProperties(minimize=True),
    },
    parameter_constraints=[
        "Ni + Fe + Co + Mn + Cr + Zn + Cu + e1 + e2 + e3 == 1.0",
        "Ni >= 0.0",
        "Fe >= 0.0",
        "Co >= 0.0",
        "Mn >= 0.0",
        "Cr >= 0.0",
        "Zn >= 0.0",
        "Cu >= 0.0",
        "e1 >= 0.0",
        "e2 >= 0.0",
        "e3 >= 0.0",
    ],
)

# Add existing data to the AxClient
# Attach hardcoded training data
for i in range(n_train):
    parameterization = X_train.iloc[i].to_dict()
    ax_client.attach_trial(parameterization)
    ax_client.complete_trial(trial_index=i, raw_data=y_train[i])


for i in range(10):  # 10 optimization steps, batch size 1
    parameterization, trial_index = ax_client.get_next_trial()
    # Ensure all fractions are non-negative and sum to 1 (enforced by
    # constraints, but clip for safety). Explicit, error-throwing parameter
    # access
    try:
        metals = [
            parameterization["Ni"],
            parameterization["Fe"],
            parameterization["Co"],
            parameterization["Mn"],
            parameterization["Cr"],
            parameterization["Zn"],
            parameterization["Cu"],
        ]
        electrolytes = [
            parameterization["e1"],
            parameterization["e2"],
            parameterization["e3"],
        ]
        all_fracs = np.clip(np.array(metals + electrolytes), 0, 1)
        if not np.isclose(all_fracs.sum(), 1.0):
            all_fracs = all_fracs / all_fracs.sum()
        Ni, Fe, Co, Mn, Cr, Zn, Cu, e1, e2, e3 = all_fracs
        temp = parameterization["temperature"]
        pH = parameterization["pH"]
        curr = parameterization["current_density"]
        sono = parameterization["sonication"]
    except KeyError as e:
        raise KeyError(f"Missing required parameter: {e}")
    results = synthetic_oer_objective_full(
        Ni, Fe, Co, Mn, Cr, Zn, Cu, e1, e2, e3, temp, pH, curr, sono
    )
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)
pareto_results = ax_client.get_pareto_optimal_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
pareto = ax_client.get_pareto_optimal_parameters(use_model_predictions=False)
pareto_data = [p[1][0] for p in pareto.values()]
pareto = pd.DataFrame(pareto_data).sort_values(objectives[0])

ax.scatter(df[objectives[0]], df[objectives[1]], fc="None", ec="k", label="Observed")
ax.plot(
    pareto[objectives[0]],
    pareto[objectives[1]],
    color="#0033FF",
    lw=2,
    label="Pareto Front",
)
ax.set_xlabel(objectives[0])
ax.set_ylabel(objectives[1])

ax.legend()
plt.show()
